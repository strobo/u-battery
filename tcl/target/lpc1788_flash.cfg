# script for LPC1788 nemuisan tokusei
# NXP LPC1788 Cortex-M3 with 512kB Flash and 64kB+32kBAHB Local On-Chip SRAM,

# Reset init script sets it to 120MHz
set CCLK 120000


# LPC17xx chips support both JTAG and SWD transports.
# Adapt based on what transport is active.
source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME lpc1788
}

# After reset the chip is clocked by the 12MHz internal RC oscillator.
# When board-specific code (reset-init handler or device firmware)
# configures another oscillator and/or PLL0, set CCLK to match; if
# you don't, then flash erase and write operations may misbehave.
# (The ROM code doing those updates cares about core clock speed...)
#
# CCLK is the core clock frequency in KHz
if { [info exists CCLK] } {
	set _CCLK $CCLK
} else {
	set _CCLK 12000 #internal 12MHz
}
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x4ba00477
}

#delays on reset lines
adapter_nsrst_delay 200
jtag_ntrst_delay 200

#jtag newtap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID
swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m3 -chain-position $_TARGETNAME

# LPC1788 has 64kB of SRAM In the ARMv7-M "Code" area (at 0x10000000)
# and 32K more on AHB, in the ARMv7-M "SRAM" area, (at 0x20000000).
$_TARGETNAME configure -work-area-phys 0x10000000 -work-area-size 0x10000

# LPC1788 has 512kB of flash memory, managed by ROM code (including a
# boot loader which verifies the flash exception table's checksum).
# flash bank <name> lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc checksum]
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME lpc2000 0x0 0x80000 0 0 $_TARGETNAME lpc1700 $_CCLK calc_checksum

# Run with *real slow* clock by default since the
# boot rom could have been playing with the PLL, so
# we have no idea what clock the target is running at.
adapter_khz 10


# Set up 120MHz clock to CPU
$_TARGETNAME configure -event reset-init {
	echo "RIZE UP TO 120MHz"

    # PLL0CON: Disable PLL
	mww 0x400FC080 0x00000000
    # PLLFEED
	mww 0x400FC08C 0x000000AA
    # PLLFEED
	mww 0x400FC08C 0x00000055
	sleep 10

    # CLKSEL: internal 12MHz RC oscillator Div 1.
	mww 0x400FC104 0x00000001
    # CLKSRCSEL: Clock source = internal 12MHz RC oscillator
	mww 0x400FC10C 0x00000000
	sleep 10

    # PLL0CFG: M=10,P=1 -> PLL=240 MHz
	mww 0x400FC084 0x00000009
    # PLLFEED
	mww 0x400FC08C 0x000000AA
    # PLLFEED
	mww 0x400FC08C 0x00000055
	sleep 100

	# PLL0CON: Enable PLL
	mww 0x400FC080 0x00000001
    # PLLFEED
	mww 0x400FC08C 0x000000AA
    # PLLFEED
	mww 0x400FC08C 0x00000055
	sleep 10

    # PLL0CON: Connect PLL
    # CCLKSEL=PLLED(240MHz)/2 (=120 MHz)
	mww 0x400FC104 0x00000102
    # PLLFEED
	mww 0x400FC08C 0x000000AA
    # PLLFEED
	mww 0x400FC08C 0x00000055
	sleep 10

	# Dividing CPU clock by 8 should be pretty conservative
	global CCLK
	adapter_khz [expr $CCLK / 8]

	# Do not remap 0x0000-0x0020 to anything but the flash (i.e. select
	# "User Flash Mode" where interrupt vectors are _not_ remapped,
	# and reside in flash instead).
	#
	# See Table 612. Memory Mapping Control register (MEMMAP - 0x400F C040) bit description
	# Bit Symbol Value Description Reset
	# value
	# 0 MAP Memory map control. 0
	# 0 Boot mode. A portion of the Boot ROM is mapped to address 0.
	# 1 User mode. The on-chip Flash memory is mapped to address 0.
	# 31:1 - Reserved. The value read from a reserved bit is not defined. NA
	#
	# http://ics.nxp.com/support/documents/microcontrollers/?scope=LPC1788&type=user

	mww 0x400FC040 0x01

}


proc mt_flash {IMGFILE} {
	flash write_image erase $IMGFILE
	verify_image $IMGFILE
	soft_reset_halt
	resume
	shutdown 
}

proc eraser {} {
	flash probe 0
	flash erase_sector 0 0 29
	flash erase_check 0
	soft_reset_halt
	shutdown 
}

#debug_level 3
verify_ircapture disable
cortex_m3 reset_config sysresetreq
init
reset init

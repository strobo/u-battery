# NXP LPC1227 Cortex-M0 with 128kB Flash and 8kB Local On-Chip SRAM,
# Nemuisan's Tokusei

# LPC1227 chips support only SWD transports.
# Adapt based on what transport is active.
source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set  _CHIPNAME $CHIPNAME
} else {
	set  _CHIPNAME lpc1227
}

# After reset the chip is clocked by the 12MHz internal RC oscillator.
# When board-specific code (reset-init handler or device firmware)
# configures another oscillator and/or PLL0, set CCLK to match; if
# you don't, then flash erase and write operations may misbehave.
# (The ROM code doing those updates cares about core clock speed...)
#
# CCLK is the core clock frequency in KHz
if { [info exists CCLK ] } {
	set _CCLK $CCLK
} else {
	set _CCLK 12000
}
if { [info exists CPUTAPID ] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x4ba00477
}

#delays on reset lines
adapter_nsrst_delay 200
jtag_ntrst_delay 200

#U MUST Select "none", Nemuisan said so!
reset_config none

swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m3 -chain-position $_TARGETNAME

# LPC1227 has 8kB of SRAM In the ARMv6-M "Code" area (at 0x10000000)
$_TARGETNAME configure -work-area-phys 0x10000000 -work-area-size 0x2000

# LPC1227 has 128kB of flash memory, managed by ROM code (including a
# boot loader which verifies the flash exception table's checksum).
# flash bank <name> lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc checksum]
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME lpc2000 0x0 0x20000 0 0 $_TARGETNAME lpc1700 $_CCLK calc_checksum


# For OpenOCD Workaround Nemuisan Only!
$_TARGETNAME configure -event gdb-attach {
# 0x1FFF0000 is IAP Address!
	echo "OpenOCD Debugging Workaroud!"
	echo "Set PC to 0x1FFFF0000(ISP Address)"
	reg pc 0x1FFF0000
}

proc mt_internal_rc {} {
# NO PLLed Starup
	poll
	halt
	sleep 10
	flash probe 0 
}

proc mt_internal_rc_ex {} {
# PLLed Starup
# NOT Supported yet.
	poll
	halt
	sleep 10
	flash probe 0 
}

proc mt_flash {IMGFILE} {
	mt_internal_rc
	flash write_image erase $IMGFILE
	verify_image $IMGFILE
	reset run
	shutdown
}

proc mt_flash_bin {IMGFILE OFFSET} {
	mt_internal_rc
	flash write_image erase $IMGFILE $OFFSET bin
	verify_image $IMGFILE $OFFSET 
	reset run
	shutdown
}

proc mt_flash_hex {IMGFILE} {
	mt_internal_rc
	flash write_image erase $IMGFILE 0 ihex
	verify_image $IMGFILE 0
	reset run
	shutdown
}


proc eraser {} {
# Verbose procedure confirmed erase routine
	mt_internal_rc
	flash erase_check 0
	sleep 10
	flash erase_sector 0 0 17
	sleep 10
	flash erase_check 0
	sleep 10
	soft_reset_halt
	shutdown 
}


#debug_level 3
adapter_khz 250
cortex_m3 reset_config sysresetreq
init
reset
halt
